â•µ
PS C:\Users\tim\Desktop\tf_test\sandbox> terraform init

Initializing the backend...
Initializing modules...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v3.76.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\tim\Desktop\tf_test\sandbox> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.sandbox_vpc.aws_eip.nat_eip[0] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_eip"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc                  = true
    }

  # module.sandbox_vpc.aws_eip.nat_eip[1] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_eip"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc                  = true
    }

  # module.sandbox_vpc.aws_eip.nat_eip[2] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_eip"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_eip"
        }
      + vpc                  = true
    }

  # module.sandbox_vpc.aws_internet_gateway.internet_gw will be created
  + resource "aws_internet_gateway" "internet_gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "sandbox_internet_gw"
        }
      + tags_all = {
          + "Name" = "sandbox_internet_gw"
        }
      + vpc_id   = (known after apply)
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[0] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[1] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_nat_gateway.nat_gw[2] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "sandbox_nat_gw"
        }
      + tags_all             = {
          + "Name" = "sandbox_nat_gw"
        }
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[0] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_a"
        }
      + tags_all         = {
          + "Name" = "sandbox_lambda_function_rt_a"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[1] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_b"
        }
      + tags_all         = {
          + "Name" = "sandbox_lambda_function_rt_b"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.lambda_function_rt[2] will be created
  + resource "aws_route_table" "lambda_function_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_lambda_function_rt_c"
        }
      + tags_all         = {
          + "Name" = "sandbox_lambda_function_rt_c"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "sandbox_public_rt"
        }
      + tags_all         = {
          + "Name" = "sandbox_public_rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[0] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[1] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.private_rta[2] will be created
  + resource "aws_route_table_association" "private_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[0] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[1] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_route_table_association.public_rta[2] will be created
  + resource "aws_route_table_association" "public_rta" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[0] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.100.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_private_subnet_a"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_private_subnet_a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[1] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.110.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_private_subnet_b"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_private_subnet_b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.private_subnets[2] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.120.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_private_subnet_c"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_private_subnet_c"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[0] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.10.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_public_subnet_a"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_public_subnet_a"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[1] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.20.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_public_subnet_b"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_public_subnet_b"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_subnet.public_subnets[2] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.33.30.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "sandbox_public_subnet_c"
        }
      + tags_all                                       = {
          + "Name" = "sandbox_public_subnet_c"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.sandbox_vpc.aws_vpc.application_vpc will be created
  + resource "aws_vpc" "application_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "172.33.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = false
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "sandbox_application_vpc"
        }
      + tags_all                             = {
          + "Name" = "sandbox_application_vpc"
        }
    }

Plan: 24 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vpc_id = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.sandbox_vpc.aws_vpc.application_vpc: Creating...
module.sandbox_vpc.aws_vpc.application_vpc: Still creating... [10s elapsed]
module.sandbox_vpc.aws_vpc.application_vpc: Creation complete after 13s [id=vpc-08e3768b324b7d155]
module.sandbox_vpc.aws_internet_gateway.internet_gw: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[1]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[0]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[0]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[1]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[2]: Creating...
module.sandbox_vpc.aws_subnet.public_subnets[2]: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[1]: Creation complete after 1s [id=subnet-0dfe71933baea57d0]
module.sandbox_vpc.aws_subnet.private_subnets[0]: Creation complete after 1s [id=subnet-05244f525c0f745b8]
module.sandbox_vpc.aws_internet_gateway.internet_gw: Creation complete after 1s [id=igw-0f135b913a5d898ce]
module.sandbox_vpc.aws_route_table.public_rt: Creating...
module.sandbox_vpc.aws_subnet.private_subnets[2]: Creation complete after 1s [id=subnet-0c6b8b6e04ed8886b]
module.sandbox_vpc.aws_route_table.public_rt: Creation complete after 2s [id=rtb-041b842291a1b7e59]
module.sandbox_vpc.aws_subnet.public_subnets[1]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_subnet.public_subnets[0]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_subnet.public_subnets[2]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_subnet.public_subnets[1]: Creation complete after 12s [id=subnet-02630c37aec015c54]
module.sandbox_vpc.aws_subnet.public_subnets[2]: Creation complete after 12s [id=subnet-0cac72d47c323eef1]
module.sandbox_vpc.aws_subnet.public_subnets[0]: Creation complete after 12s [id=subnet-0981cb49fb2044776]
module.sandbox_vpc.aws_route_table_association.public_rta[1]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[2]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[2]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[0]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[0]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[1]: Creating...
module.sandbox_vpc.aws_eip.nat_eip[2]: Creation complete after 1s [id=eipalloc-0b76b915903e77fe4]
module.sandbox_vpc.aws_eip.nat_eip[1]: Creation complete after 1s [id=eipalloc-0f54c0a70a881ecdc]
module.sandbox_vpc.aws_eip.nat_eip[0]: Creation complete after 1s [id=eipalloc-0ea6e7cff25b84a61]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Creating...
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Creating...
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Creating...
module.sandbox_vpc.aws_route_table_association.public_rta[0]: Creation complete after 1s [id=rtbassoc-0add83369827fd881]
module.sandbox_vpc.aws_route_table_association.public_rta[2]: Creation complete after 1s [id=rtbassoc-0a823d305584298c2]
module.sandbox_vpc.aws_route_table_association.public_rta[1]: Creation complete after 1s [id=rtbassoc-0ec9556c9d81641c7]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m0s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m10s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m20s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m30s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[0]: Creation complete after 1m36s [id=nat-09d5069555a19d8bb]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Still creating... [1m40s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[1]: Creation complete after 1m47s [id=nat-0385e372853587e49]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Still creating... [1m50s elapsed]
module.sandbox_vpc.aws_nat_gateway.nat_gw[2]: Creation complete after 1m57s [id=nat-0c41a7c3205981360]
module.sandbox_vpc.aws_route_table.lambda_function_rt[2]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[0]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[1]: Creating...
module.sandbox_vpc.aws_route_table.lambda_function_rt[2]: Creation complete after 2s [id=rtb-09d053e6a79e16d99]
module.sandbox_vpc.aws_route_table.lambda_function_rt[0]: Creation complete after 2s [id=rtb-0db9de49635b4c203]
module.sandbox_vpc.aws_route_table.lambda_function_rt[1]: Creation complete after 2s [id=rtb-0e0034fef09c984bb]
module.sandbox_vpc.aws_route_table_association.private_rta[0]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[1]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[2]: Creating...
module.sandbox_vpc.aws_route_table_association.private_rta[2]: Creation complete after 1s [id=rtbassoc-028e6b8747fd9b58f]
module.sandbox_vpc.aws_route_table_association.private_rta[0]: Creation complete after 1s [id=rtbassoc-0c42c73f8554a0ca0]
module.sandbox_vpc.aws_route_table_association.private_rta[1]: Creation complete after 1s [id=rtbassoc-07dfe7603c822207d]

Apply complete! Resources: 24 added, 0 changed, 0 destroyed.

Outputs:

vpc_id = "vpc-08e3768b324b7d155"